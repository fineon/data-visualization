[{"C:\\Users\\Vinh\\Desktop\\BrainStationWebDev\\Capstone project\\data-visualization\\client\\src\\index.js":"1","C:\\Users\\Vinh\\Desktop\\BrainStationWebDev\\Capstone project\\data-visualization\\client\\src\\App.js":"2","C:\\Users\\Vinh\\Desktop\\BrainStationWebDev\\Capstone project\\data-visualization\\client\\src\\reportWebVitals.js":"3","C:\\Users\\Vinh\\Desktop\\BrainStationWebDev\\Capstone project\\data-visualization\\client\\src\\Header\\Header.jsx":"4","C:\\Users\\Vinh\\Desktop\\BrainStationWebDev\\Capstone project\\data-visualization\\client\\src\\Dashboard\\Dashboard.jsx":"5","C:\\Users\\Vinh\\Desktop\\BrainStationWebDev\\Capstone project\\data-visualization\\client\\src\\SignIn\\SignIn.jsx":"6","C:\\Users\\Vinh\\Desktop\\BrainStationWebDev\\Capstone project\\data-visualization\\client\\src\\UserHomePage\\UserHomePage.jsx":"7","C:\\Users\\Vinh\\Desktop\\BrainStationWebDev\\Capstone project\\data-visualization\\client\\src\\InstantAnswers\\InstantAnswers.jsx":"8","C:\\Users\\Vinh\\Desktop\\BrainStationWebDev\\Capstone project\\data-visualization\\client\\src\\WorldCards\\WorldCards.jsx":"9","C:\\Users\\Vinh\\Desktop\\BrainStationWebDev\\Capstone project\\data-visualization\\client\\src\\SignIn\\TestSignIn.jsx":"10","C:\\Users\\Vinh\\Desktop\\BrainStationWebDev\\Capstone project\\data-visualization\\client\\src\\SignIn\\fire.js":"11","C:\\Users\\Vinh\\Desktop\\BrainStationWebDev\\Capstone project\\data-visualization\\client\\src\\Footer\\Footer.jsx":"12","C:\\Users\\Vinh\\Desktop\\BrainStationWebDev\\Capstone project\\data-visualization\\client\\src\\Canada\\Canada.jsx":"13"},{"size":500,"mtime":499162500000,"results":"14","hashOfConfig":"15"},{"size":733,"mtime":1612134028609,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":499162500000,"results":"17","hashOfConfig":"15"},{"size":2206,"mtime":1612142314460,"results":"18","hashOfConfig":"15"},{"size":16279,"mtime":1612145970379,"results":"19","hashOfConfig":"15"},{"size":1022,"mtime":1612127098657,"results":"20","hashOfConfig":"15"},{"size":2920,"mtime":1612172952067,"results":"21","hashOfConfig":"15"},{"size":2017,"mtime":1612171547011,"results":"22","hashOfConfig":"15"},{"size":2239,"mtime":1612132696069,"results":"23","hashOfConfig":"15"},{"size":1446,"mtime":1612127098657,"results":"24","hashOfConfig":"15"},{"size":465,"mtime":1612127098672,"results":"25","hashOfConfig":"15"},{"size":1001,"mtime":1612170458441,"results":"26","hashOfConfig":"15"},{"size":4198,"mtime":1612142994472,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"3pszy1",{"filePath":"31","messages":"32","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"30"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"30"},"C:\\Users\\Vinh\\Desktop\\BrainStationWebDev\\Capstone project\\data-visualization\\client\\src\\index.js",[],["60","61"],"C:\\Users\\Vinh\\Desktop\\BrainStationWebDev\\Capstone project\\data-visualization\\client\\src\\App.js",["62","63","64","65"],"import './App.css';\r\n\r\nimport Header from './Header/Header';\r\nimport Dashboard from './Dashboard/Dashboard';\r\nimport SignIn from './SignIn/SignIn';\r\nimport TestSignIn from './SignIn/TestSignIn';\r\nimport UserHomePage from './UserHomePage/UserHomePage';\r\nimport { BrowserRouter as Router, Link, Switch, Route } from \"react-router-dom\";\r\nimport Canada from './Canada/Canada';\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n    <Router>\r\n      <Switch>\r\n        <Route path='/' exact component={Dashboard} />\r\n        <Route path='/signin' render={(props) => <SignIn {...props}/>} />\r\n        <Route path='/dashboard/' render={(props) => <UserHomePage {...props}/>} />\r\n      </Switch>\r\n    </Router>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\Vinh\\Desktop\\BrainStationWebDev\\Capstone project\\data-visualization\\client\\src\\reportWebVitals.js",[],"C:\\Users\\Vinh\\Desktop\\BrainStationWebDev\\Capstone project\\data-visualization\\client\\src\\Header\\Header.jsx",[],"C:\\Users\\Vinh\\Desktop\\BrainStationWebDev\\Capstone project\\data-visualization\\client\\src\\Dashboard\\Dashboard.jsx",["66","67"],"import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport { Link } from 'react-router-dom';\r\nimport Highcharts, { chart } from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport timelineChart from 'highcharts/modules/timeline';\r\n\r\nimport Header from './../Header/Header';\r\nimport InstantAnswers from './../InstantAnswers/InstantAnswers';\r\nimport WorldCards from '../WorldCards/WorldCards';\r\n\r\nimport './Dashboard.scss';\r\n\r\nimport Footer from './../Footer/Footer';\r\nimport Canada from '../Canada/Canada';\r\n\r\ntimelineChart(Highcharts);\r\n\r\nlet allCountries = 'http://localhost:8080/allcountries';\r\nlet canada = 'http://localhost:8080/canada';\r\nlet duckDuckGo = 'http://localhost:8080/duckduckgo';\r\n\r\nexport default class Dashboard extends Component {\r\n    state = {\r\n        instantAnswers: {},\r\n        countries: {},\r\n        canada: [],\r\n        timeline: {\r\n            chart: {\r\n                type: 'timeline'\r\n            },\r\n            accessibility: {\r\n                screenReaderSection: {\r\n                    beforeChartFormat: '<h5>{chartTitle}</h5>' +\r\n                        '<div>{typeDescription}</div>' +\r\n                        '<div>{chartSubtitle}</div>' +\r\n                        '<div>{chartLongdesc}</div>' +\r\n                        '<div>{viewTableButton}</div>'\r\n                },\r\n                point: {\r\n                    valueDescriptionFormat: '{index}. {point.label}. {point.description}.'\r\n                }\r\n            },\r\n            xAxis: {\r\n                visible: false\r\n            },\r\n            yAxis: {\r\n                visible: false\r\n            },\r\n            title: {\r\n                text: 'Timeline of COVID-19 in Canada'\r\n            },\r\n            colors: [\r\n                '#4185F3',\r\n                '#427CDD',\r\n                '#406AB2',\r\n                '#3E5A8E',\r\n                '#3B4A68',\r\n                '#363C46'\r\n            ],\r\n            series: [{\r\n                data: [{\r\n                    name: 'First Outbreak',\r\n                    label: 'Dec.19: First Outbreak',\r\n                    description: 'December 2019: A new, infectious coronavirus, from the same family of viruses causing the common cold, is first identified in the City of Wuhan in Chinaâ€™s Hubei province. It starts spreading from person to person, beginning the outbreak.'\r\n                }, {\r\n                    name: 'First Case in B.C',\r\n                    label: 'Jan.2020: First Case in B.C',\r\n                    description: 'Jan.28,2020: Health officials announce the first presumptive case of novel coronavirus in B.C. The patient had recently been in Wuhan, China, on a business trip and tested positive after returning to his home in the Vancouver Coastal Health region. A second test at the National Microbiology Laboratory in Winnipeg later confirms the diagnosis.'\r\n                }, {\r\n                    name: 'Physical Distancing',\r\n                    label: 'March,2020: Start of Physical Distancing',\r\n                    description: 'March.16,2020: Many British Columbians begin the work week from home, following directives from public health officials to stay home if they are able.Gatherings of more than 50 people are banned in B.C., including sporting events, meetings, conferences, concerts and religious gatherings. Any businesses that cannot avoid large groups of people, like restaurants, bars and casinos, are ordered to shut down. Many restaurants move to take-out service only.Visits to long-term care homes are restricted to essential visitors only.'\r\n                }, {\r\n                    name: 'Public Health Emergency Declared',\r\n                    label: 'March, 2020: Public Health Emergency Declared',\r\n                    description: 'March.17,2020: Provincial Health Officer Dr. Bonnie Henry declares a public health emergency in B.C., giving herself power to make verbal orders to the public that are immediately enforceable. Classes and Flights are cancelled. Repatriation flights are announced'\r\n                }, \r\n            ]\r\n            }]\r\n        },\r\n\r\n\r\n        //highcharts properties\r\n        pieChartCases: {},\r\n        topNewCaseCountry: {},\r\n        //stacked chart\r\n        specificCountryChart: {},\r\n\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        axios.get(allCountries).then(item => {\r\n            console.log(item);\r\n            this.setState({\r\n                countries: item.data,\r\n                pieChartCases: {\r\n                    chart: {\r\n                        type: 'pie'\r\n                    },\r\n                    title: {\r\n                        text: 'Global COVID-19 Cases'\r\n                    },\r\n                    //to render a half circle\r\n\r\n                    //  plotOptions: {\r\n                    //     pie: {\r\n                    //       dataLabels: {\r\n                    //         enabled: true,\r\n                    //         distance: -50,\r\n                    //         style: {\r\n                    //           fontWeight: \"bold\",\r\n                    //           color: \"black\"\r\n                    //         }\r\n                    //       },\r\n                    //       startAngle: -90,\r\n                    //       endAngle: 90,\r\n                    //       center: [\"50%\", \"75%\"],\r\n                    //       size: \"110%\"\r\n                    //     }\r\n                    //   },\r\n                    series: [{\r\n                        name: 'cases',\r\n                        colorByPoint: true,\r\n                        data: [\r\n                            {\r\n                                name: 'New Confirmed',\r\n                                y: item.data.Global.NewConfirmed\r\n                            }, {\r\n                                name: 'Total Confirmed',\r\n                                y: item.data.Global.TotalConfirmed\r\n                            },\r\n                            {\r\n                                name: 'New Deaths',\r\n                                y: item.data.Global.NewDeaths\r\n                            },\r\n                            {\r\n                                name: 'Total Deaths',\r\n                                y: item.data.Global.TotalDeaths\r\n                            },\r\n                            {\r\n                                name: 'New Recovered',\r\n                                y: item.data.Global.NewRecovered\r\n                            },\r\n                            {\r\n                                name: 'Total Recovered',\r\n                                y: item.data.Global.TotalRecovered\r\n                            }\r\n                        ]\r\n                    }]\r\n                }\r\n            });\r\n\r\n        });\r\n\r\n        axios.get(duckDuckGo).then(answer => {\r\n            console.log(answer)\r\n            this.setState({\r\n                instantAnswers: answer.data,\r\n            })\r\n        })\r\n\r\n        axios.get(canada).then(province => {\r\n            console.log(province)\r\n            this.setState({\r\n                canada: province.data\r\n            })\r\n        })\r\n    }\r\n\r\n    setCountry = (e) => {\r\n        axios.get(`http://localhost:8080/country/${e}`).then(item => {\r\n            console.log(item);\r\n            this.setState({\r\n                specificCountryChart: {\r\n                    chart: {\r\n                        type: 'pie'\r\n                    },\r\n                    title: {\r\n                        text: `${item.data.pop().Country} / ${item.data.pop().CountryCode} - ${new Date(item.data.pop().Date).toDateString()}`\r\n                    },\r\n                    series: [{\r\n                        name: 'cases',\r\n                        colorByPoint: true,\r\n                        data: [\r\n                            {\r\n                                name: 'Confirmed',\r\n                                y: item.data.pop().Confirmed\r\n                            },\r\n                            {\r\n                                name: 'Deaths',\r\n                                y: item.data.pop().Deaths\r\n                            },\r\n                            {\r\n                                name: 'Recovered',\r\n                                y: item.data.pop().Recovered\r\n                            }\r\n                        ]\r\n                    }]\r\n                },\r\n            });\r\n        });\r\n    }\r\n\r\n    searchQuery = (e) => {\r\n        e.preventDefault()\r\n        axios.get(`http://localhost:8080/duckduckgo/${e.target.query.value}`).then(res => {\r\n            console.log(res)\r\n            this.setState({\r\n                instantAnswers: res.data,\r\n            })\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        document.title = \"COVID-19 Data Dashboard\"\r\n\r\n        if (this.state.instantAnswers.Infobox) {\r\n            //remove the last nested object for proper mapping JSX\r\n            let popped = this.state.instantAnswers.Infobox.content.pop()\r\n        }\r\n\r\n        let numArr = []\r\n        let biggestCase\r\n        let topNewCaseCountry\r\n        let rankedCases\r\n        let cutRanked\r\n        let top5Countries = []\r\n\r\n\r\n        if (this.state.countries.Countries) {\r\n            // renders an array only with numbers of new cases\r\n            numArr = this.state.countries.Countries.map(num => num.NewConfirmed)\r\n\r\n            // find the largest number\r\n            biggestCase = Math.max(...numArr)\r\n            console.log(biggestCase)\r\n            // find the country with most new cases\r\n            topNewCaseCountry = this.state.countries.Countries.find(num => num.NewConfirmed === biggestCase)\r\n            console.log(topNewCaseCountry)\r\n\r\n            // sort by lowest to highest cases\r\n            rankedCases = numArr.sort((a, b) => a - b)\r\n            console.log(rankedCases)\r\n\r\n            // get the top 5 highest number of cases\r\n            // cutRanked = rankedCases.splice(184, 5)\r\n            cutRanked = rankedCases.splice(rankedCases.length-5, 5)\r\n            console.log(cutRanked)\r\n\r\n            // search for top 5 countries with most confirmed cases\r\n\r\n            for (let i = 0; i < cutRanked.length; i++) {\r\n                top5Countries.push(this.state.countries.Countries.find(obj => obj.NewConfirmed === cutRanked[i]))\r\n            }\r\n\r\n            console.log(top5Countries)\r\n        }\r\n\r\n  \r\n        //highcharts property to render\r\n        const mostNewCaseCountry = {\r\n            chart: {\r\n                type: 'pie'\r\n            },\r\n            title: {\r\n                text: 'U.S COVID-19 Cases'\r\n            },\r\n            series: [{\r\n                name: 'cases',\r\n                colorByPoint: true,\r\n                data: [\r\n                    {\r\n                        name: 'New Confirmed',\r\n                        y: this.state.countries.Countries && topNewCaseCountry.NewConfirmed\r\n                    }, {\r\n                        name: 'Total Confirmed',\r\n                        y: this.state.countries.Countries && topNewCaseCountry.TotalConfirmed\r\n                    },\r\n                    {\r\n                        name: 'New Deaths',\r\n                        y: this.state.countries.Countries && topNewCaseCountry.NewDeaths\r\n                    },\r\n                    {\r\n                        name: 'Total Deaths',\r\n                        y: this.state.countries.Countries && topNewCaseCountry.TotalDeaths\r\n                    },\r\n                    {\r\n                        name: 'New Recovered',\r\n                        y: this.state.countries.Countries && topNewCaseCountry.NewRecovered\r\n                    },\r\n                    {\r\n                        name: 'Total Recovered',\r\n                        y: this.state.countries.Countries && topNewCaseCountry.TotalRecovered\r\n                    }\r\n                ]\r\n            }],\r\n        }\r\n\r\n        const top5 = {\r\n            chart: {\r\n                type: 'column'\r\n            },\r\n            title: {\r\n                text: 'Top 5 Countries with Most New Cases'\r\n            },\r\n            xAxis: {\r\n                categories: this.state.countries.Countries && top5Countries.map(name => name.Country)\r\n            },\r\n            yAxis: {\r\n                min: 0,\r\n                title: {\r\n                    text: 'Cases'\r\n                }\r\n            },\r\n            plotOptions: {\r\n                column: {\r\n                    stacking: 'normal',\r\n                    dataLabels: {\r\n                        enabled: true\r\n                    }\r\n                }\r\n            },\r\n            series: [\r\n                {\r\n                    name: 'confirmed cases',\r\n                    data: this.state.countries.Countries && top5Countries.map(name => name.NewConfirmed)\r\n                },\r\n                {\r\n                    name: 'recovered cases',\r\n                    data: this.state.countries.Countries && top5Countries.map(name => name.NewRecovered)\r\n                },\r\n                {\r\n                    name: 'death cases',\r\n                    data: this.state.countries.Countries && top5Countries.map(name => name.NewDeaths)\r\n                }\r\n            ]\r\n        }\r\n\r\n      \r\n\r\n        return (\r\n            <section>\r\n                <Header />\r\n                <h2 id=\"dashboard\" className='dashboard'>Data Dashboard</h2>\r\n\r\n                <Canada \r\n                allProvinces={this.state.canada}\r\n                timeline={this.state.timeline}\r\n                />\r\n\r\n                \r\n\r\n                <form >\r\n                    <label > Select your country to view cases </label>\r\n                    <select\r\n                        name=\"countries\"\r\n\r\n                        onChange={e => this.setCountry(e.target.value)}>\r\n\r\n                        {this.state.countries.Countries && this.state.countries.Countries.map(country => {\r\n                            return <option\r\n                                key={country.ID}\r\n                                value={country.Country}>\r\n                                {country.Country}\r\n                            </option>\r\n                        })}\r\n\r\n                    </select>\r\n                </form>\r\n\r\n                {this.state.specificCountryChart.series !== undefined ? <HighchartsReact\r\n                    highcharts={Highcharts}\r\n                    options={this.state.specificCountryChart} /> : <h3>Select another country to begin</h3>}\r\n\r\n                <div className=\"test\">\r\n                    <HighchartsReact\r\n                        highcharts={Highcharts}\r\n                        options={this.state.pieChartCases} />\r\n                    <p>data updated as of {new Date(this.state.countries.Date).toDateString()}</p>\r\n                </div>\r\n\r\n                <WorldCards\r\n                    Global={this.state.countries.Global} />\r\n\r\n                <div>\r\n                    <h2>{this.state.countries.Countries && topNewCaseCountry.Country} is the country with most newly confirmed cases</h2>\r\n\r\n                    <HighchartsReact\r\n                        highcharts={Highcharts}\r\n                        options={mostNewCaseCountry}\r\n                    />\r\n\r\n\r\n                </div>\r\n\r\n                <div>\r\n                    <h2>Top 5 countries with most newly confirmed cases</h2>\r\n\r\n                    <HighchartsReact\r\n                        highcharts={Highcharts}\r\n                        options={top5} />\r\n                </div>\r\n\r\n\r\n                <InstantAnswers\r\n                    Heading={this.state.instantAnswers.Heading}\r\n\r\n                    Image={this.state.instantAnswers.Image}\r\n\r\n                    Abstract={this.state.instantAnswers.Abstract}\r\n\r\n                    AbstractURL={this.state.instantAnswers.AbstractURL}\r\n\r\n                    Infobox={this.state.instantAnswers.Infobox}\r\n\r\n                    searchQuery={this.searchQuery}\r\n                />\r\n\r\n\r\n\r\n                <div>\r\n                    <h2>And More Data Awaits After Signing Up (Location-based data, export as PDF, CSV and social media sharing)</h2>\r\n                    <Link to='/signin'>\r\n                        <button>Sign In</button>\r\n                    </Link>\r\n                </div>\r\n\r\n                <Footer />\r\n            </section>\r\n        )\r\n    }\r\n}\r\n","C:\\Users\\Vinh\\Desktop\\BrainStationWebDev\\Capstone project\\data-visualization\\client\\src\\SignIn\\SignIn.jsx",["68","69","70","71"],"import React, { Component, useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport firebase from \"firebase/app\"\r\nimport \"firebase/analytics\"\r\nimport * as firebaseui from 'firebaseui'\r\nimport 'firebaseui/dist/firebaseui.css'\r\nimport \"firebase/analytics\"\r\n\r\nimport './SignIn.scss'\r\n\r\nimport Header from './../Header/Header';\r\n\r\nimport fire from './fire';\r\n\r\n\r\n\r\nexport default function SignIn() {\r\n    useEffect( () => {\r\n        var ui = new firebaseui.auth.AuthUI(firebase.auth());\r\n        \r\n        ui.start('#firebaseui-container', {\r\n            signInOptions: [\r\n                firebase.auth.EmailAuthProvider.PROVIDER_ID\r\n            ],\r\n            signInSuccessUrl: './dashboard/',\r\n            // Other config options...\r\n        });\r\n\r\n        return () => {\r\n            ui.delete();\r\n           };\r\n\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <section>\r\n            <Header loggedIn=\"visitor\" />\r\n\r\n            <div id=\"firebaseui-container\"></div>\r\n\r\n        </section>\r\n    )\r\n\r\n}\r\n","C:\\Users\\Vinh\\Desktop\\BrainStationWebDev\\Capstone project\\data-visualization\\client\\src\\UserHomePage\\UserHomePage.jsx",["72","73","74","75","76","77"],"C:\\Users\\Vinh\\Desktop\\BrainStationWebDev\\Capstone project\\data-visualization\\client\\src\\InstantAnswers\\InstantAnswers.jsx",[],"C:\\Users\\Vinh\\Desktop\\BrainStationWebDev\\Capstone project\\data-visualization\\client\\src\\WorldCards\\WorldCards.jsx",[],"C:\\Users\\Vinh\\Desktop\\BrainStationWebDev\\Capstone project\\data-visualization\\client\\src\\SignIn\\TestSignIn.jsx",["78","79","80"],"import React, { Component, useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport firebase from \"firebase/app\"\r\nimport \"firebase/analytics\"\r\nimport * as firebaseui from 'firebaseui'\r\nimport 'firebaseui/dist/firebaseui.css'\r\nimport \"firebase/analytics\"\r\n\r\nimport './SignIn.scss'\r\n\r\nimport Header from './../Header/Header';\r\n\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyDYdM7vWZtPaUfEaxAtyezJKXW9CM5hgxE\",\r\n    authDomain: \"covid-user-sign-in.firebaseapp.com\",\r\n    projectId: \"covid-user-sign-in\",\r\n    storageBucket: \"covid-user-sign-in.appspot.com\",\r\n    messagingSenderId: \"224448347353\",\r\n    appId: \"1:224448347353:web:40604ad1606ad9e9fe92c8\",\r\n    measurementId: \"G-M38E2V56TT\"\r\n};\r\n\r\n\r\n\r\nexport default class SignIn extends Component {\r\n\r\n    componentDidMount() {\r\n        \r\n        !firebase.apps.length ? firebase.initializeApp(firebaseConfig) : firebase.app();\r\n\r\n        var ui = new firebaseui.auth.AuthUI(firebase.auth());\r\n\r\n        ui.start('#firebaseui-container', {\r\n            signInOptions: [\r\n                firebase.auth.EmailAuthProvider.PROVIDER_ID\r\n            ],\r\n            signInSuccessUrl: './dashboard/',\r\n            // Other config options...\r\n        });\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <section>\r\n                <Header loggedIn=\"visitor\" />\r\n\r\n                <div id=\"firebaseui-container\"></div>\r\n\r\n            </section>\r\n        )\r\n    }\r\n}\r\n","C:\\Users\\Vinh\\Desktop\\BrainStationWebDev\\Capstone project\\data-visualization\\client\\src\\SignIn\\fire.js",[],"C:\\Users\\Vinh\\Desktop\\BrainStationWebDev\\Capstone project\\data-visualization\\client\\src\\Footer\\Footer.jsx",[],"C:\\Users\\Vinh\\Desktop\\BrainStationWebDev\\Capstone project\\data-visualization\\client\\src\\Canada\\Canada.jsx",["81","82","83","84","85","86","87","88","89","90"],"import React from 'react'\r\nimport Highcharts, { chart } from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\n\r\nexport default function Canada(props) {\r\n    //for canada only\r\n    let latestCanada = []\r\n    let splicedDateCan = []\r\n\r\n    //getting provinces\r\n    let yukon\r\n    let sask\r\n    let BC\r\n    let ON\r\n    let alberta\r\n    let newBrun\r\n    let NS\r\n    let manitoba\r\n    let newFound\r\n    let northwest\r\n    let princeE\r\n    let nuvavut\r\n    let QB\r\n\r\n    let currentDate = new Date(new Date().setUTCHours(0, 0, 0, 0)).toISOString();\r\n\r\n    if (props.allProvinces) {\r\n        //for online api\r\n        // latestCanada.push(props.allProvinces.pop())\r\n\r\n        //for offline api\r\n        latestCanada.push(props.allProvinces)\r\n\r\n\r\n        for (let i = 0; i < latestCanada.length; i++) {\r\n            console.log(typeof latestCanada[i])\r\n            if (Array.isArray(latestCanada[i])) {\r\n                for (let a = 0; a < latestCanada[i].length; a++) {\r\n                    splicedDateCan.push({\r\n                        date: new Date(latestCanada[i][a].Date).toLocaleDateString(),\r\n                        province: latestCanada[i][a].Province,\r\n                        active: latestCanada[i][a].Active,\r\n                    })\r\n                }\r\n            }\r\n        }\r\n\r\n        console.log(splicedDateCan)\r\n\r\n        //an attempt to automate filtertering 13 provinces\r\n\r\n        // for (let k of  [yukon,sask, BC, ON,alberta, newBrun,NS,manitoba,newFound, northwest, princeE, nuvavut, QB] ) {\r\n        //     for (const val of ['Yukon','Saskatchewan','British Columbia','Ontario','Alberta','New Brunswick','Nova Scotia','Manitoba','Newfoundland and Labrador','Northwest Territories','Prince Edward Island','Nunavut','Quebec']) {\r\n        //         k = splicedDateCan.filter(item => item.province === val)    \r\n        //     }\r\n        //     console.log(k)\r\n        // }\r\n\r\n\r\n        BC = splicedDateCan.filter(item => item.province === 'British Columbia')\r\n\r\n        ON = splicedDateCan.filter(item => item.province === 'Ontario')\r\n\r\n        alberta = splicedDateCan.filter(item => item.province === 'Alberta')\r\n\r\n        sask = splicedDateCan.filter(item => item.province === 'Saskatchewan')\r\n\r\n        QB = splicedDateCan.filter(item => item.province === 'Quebec')\r\n\r\n\r\n    }\r\n\r\n    console.log(BC)\r\n\r\n    const allProvinces = {\r\n        title: {\r\n            text: 'Major Canadian Provinces - Active Cases History'\r\n        },\r\n\r\n        yAxis: {\r\n            title: {\r\n                text: 'Cases'\r\n            }\r\n        },\r\n\r\n        xAxis: {\r\n            categories: props.allProvinces && BC.map(date => date.date)\r\n        },\r\n\r\n        legend: {\r\n            layout: 'vertical',\r\n            align: 'right',\r\n            verticalAlign: 'middle'\r\n        },\r\n        series: [\r\n            {\r\n                name: 'British Columbia',\r\n                data: props.allProvinces && BC.map(item => item.active)\r\n            }, {\r\n                name: 'Alberta',\r\n                data: props.allProvinces && alberta.map(item => item.active)\r\n            }, {\r\n                name: 'Saskachewan',\r\n                data: props.allProvinces && sask.map(item => item.active)\r\n            }, {\r\n                name: 'Ontario',\r\n                data: props.allProvinces && ON.map(item => item.active)\r\n            }, {\r\n                name: 'Quebec',\r\n                data: props.allProvinces && QB.map(item => item.active)\r\n            },\r\n        ],\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2>Canada Statistics and Resources</h2>\r\n\r\n            <h3>Major Canada Provinces with Daily New Cases</h3>\r\n            <HighchartsReact\r\n                highcharts={Highcharts}\r\n                options={allProvinces} />\r\n\r\n            <h3>Timeline of COVID-19 as it happends in British Columbia</h3>\r\n            <div>\r\n                <HighchartsReact\r\n                    highcharts={Highcharts}\r\n                    options={props.timeline}\r\n                />\r\n            <p>source: <a href=\"https://www.cbc.ca/news/canada/british-columbia/covid-19-bc-timeline-1.5520943\">CBC News</a></p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n",{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","severity":1,"message":"96","line":3,"column":8,"nodeType":"97","messageId":"98","endLine":3,"endColumn":14},{"ruleId":"95","severity":1,"message":"99","line":6,"column":8,"nodeType":"97","messageId":"98","endLine":6,"endColumn":18},{"ruleId":"95","severity":1,"message":"100","line":8,"column":35,"nodeType":"97","messageId":"98","endLine":8,"endColumn":39},{"ruleId":"95","severity":1,"message":"101","line":9,"column":8,"nodeType":"97","messageId":"98","endLine":9,"endColumn":14},{"ruleId":"95","severity":1,"message":"102","line":4,"column":22,"nodeType":"97","messageId":"98","endLine":4,"endColumn":27},{"ruleId":"95","severity":1,"message":"103","line":223,"column":17,"nodeType":"97","messageId":"98","endLine":223,"endColumn":23},{"ruleId":"95","severity":1,"message":"104","line":1,"column":17,"nodeType":"97","messageId":"98","endLine":1,"endColumn":26},{"ruleId":"95","severity":1,"message":"105","line":1,"column":28,"nodeType":"97","messageId":"98","endLine":1,"endColumn":36},{"ruleId":"95","severity":1,"message":"100","line":2,"column":10,"nodeType":"97","messageId":"98","endLine":2,"endColumn":14},{"ruleId":"95","severity":1,"message":"106","line":13,"column":8,"nodeType":"97","messageId":"98","endLine":13,"endColumn":12},{"ruleId":"95","severity":1,"message":"104","line":1,"column":17,"nodeType":"97","messageId":"98","endLine":1,"endColumn":26},{"ruleId":"95","severity":1,"message":"107","line":1,"column":28,"nodeType":"97","messageId":"98","endLine":1,"endColumn":38},{"ruleId":"95","severity":1,"message":"105","line":1,"column":40,"nodeType":"97","messageId":"98","endLine":1,"endColumn":48},{"ruleId":"95","severity":1,"message":"108","line":1,"column":50,"nodeType":"97","messageId":"98","endLine":1,"endColumn":59},{"ruleId":"95","severity":1,"message":"109","line":2,"column":8,"nodeType":"97","messageId":"98","endLine":2,"endColumn":13},{"ruleId":"95","severity":1,"message":"102","line":3,"column":22,"nodeType":"97","messageId":"98","endLine":3,"endColumn":27},{"ruleId":"95","severity":1,"message":"105","line":1,"column":28,"nodeType":"97","messageId":"98","endLine":1,"endColumn":36},{"ruleId":"95","severity":1,"message":"108","line":1,"column":38,"nodeType":"97","messageId":"98","endLine":1,"endColumn":47},{"ruleId":"95","severity":1,"message":"100","line":2,"column":10,"nodeType":"97","messageId":"98","endLine":2,"endColumn":14},{"ruleId":"95","severity":1,"message":"102","line":2,"column":22,"nodeType":"97","messageId":"98","endLine":2,"endColumn":27},{"ruleId":"95","severity":1,"message":"110","line":11,"column":9,"nodeType":"97","messageId":"98","endLine":11,"endColumn":14},{"ruleId":"95","severity":1,"message":"111","line":16,"column":9,"nodeType":"97","messageId":"98","endLine":16,"endColumn":16},{"ruleId":"95","severity":1,"message":"112","line":17,"column":9,"nodeType":"97","messageId":"98","endLine":17,"endColumn":11},{"ruleId":"95","severity":1,"message":"113","line":18,"column":9,"nodeType":"97","messageId":"98","endLine":18,"endColumn":17},{"ruleId":"95","severity":1,"message":"114","line":19,"column":9,"nodeType":"97","messageId":"98","endLine":19,"endColumn":17},{"ruleId":"95","severity":1,"message":"115","line":20,"column":9,"nodeType":"97","messageId":"98","endLine":20,"endColumn":18},{"ruleId":"95","severity":1,"message":"116","line":21,"column":9,"nodeType":"97","messageId":"98","endLine":21,"endColumn":16},{"ruleId":"95","severity":1,"message":"117","line":22,"column":9,"nodeType":"97","messageId":"98","endLine":22,"endColumn":16},{"ruleId":"95","severity":1,"message":"118","line":25,"column":9,"nodeType":"97","messageId":"98","endLine":25,"endColumn":20},"no-native-reassign",["119"],"no-negated-in-lhs",["120"],"no-unused-vars","'Header' is defined but never used.","Identifier","unusedVar","'TestSignIn' is defined but never used.","'Link' is defined but never used.","'Canada' is defined but never used.","'chart' is defined but never used.","'popped' is assigned a value but never used.","'Component' is defined but never used.","'useState' is defined but never used.","'fire' is defined but never used.","'useContext' is defined but never used.","'useEffect' is defined but never used.","'axios' is defined but never used.","'yukon' is defined but never used.","'newBrun' is defined but never used.","'NS' is defined but never used.","'manitoba' is defined but never used.","'newFound' is defined but never used.","'northwest' is defined but never used.","'princeE' is defined but never used.","'nuvavut' is defined but never used.","'currentDate' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]