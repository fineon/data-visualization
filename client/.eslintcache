[{"C:\\Users\\Vinh\\Desktop\\BrainStationWebDev\\Capstone project\\data-visualization\\client\\src\\index.js":"1","C:\\Users\\Vinh\\Desktop\\BrainStationWebDev\\Capstone project\\data-visualization\\client\\src\\App.js":"2","C:\\Users\\Vinh\\Desktop\\BrainStationWebDev\\Capstone project\\data-visualization\\client\\src\\reportWebVitals.js":"3","C:\\Users\\Vinh\\Desktop\\BrainStationWebDev\\Capstone project\\data-visualization\\client\\src\\Header\\Header.jsx":"4","C:\\Users\\Vinh\\Desktop\\BrainStationWebDev\\Capstone project\\data-visualization\\client\\src\\Dashboard\\Dashboard.jsx":"5","C:\\Users\\Vinh\\Desktop\\BrainStationWebDev\\Capstone project\\data-visualization\\client\\src\\SignIn\\SignIn.jsx":"6","C:\\Users\\Vinh\\Desktop\\BrainStationWebDev\\Capstone project\\data-visualization\\client\\src\\UserHomePage\\UserHomePage.jsx":"7","C:\\Users\\Vinh\\Desktop\\BrainStationWebDev\\Capstone project\\data-visualization\\client\\src\\InstantAnswers\\InstantAnswers.jsx":"8","C:\\Users\\Vinh\\Desktop\\BrainStationWebDev\\Capstone project\\data-visualization\\client\\src\\WorldCards\\WorldCards.jsx":"9","C:\\Users\\Vinh\\Desktop\\BrainStationWebDev\\Capstone project\\data-visualization\\client\\src\\SignIn\\TestSignIn.jsx":"10"},{"size":500,"mtime":499162500000,"results":"11","hashOfConfig":"12"},{"size":700,"mtime":1611817976112,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":499162500000,"results":"14","hashOfConfig":"12"},{"size":2268,"mtime":1611654227902,"results":"15","hashOfConfig":"12"},{"size":12569,"mtime":1611797621293,"results":"16","hashOfConfig":"12"},{"size":1402,"mtime":1611817861667,"results":"17","hashOfConfig":"12"},{"size":5286,"mtime":1611545117363,"results":"18","hashOfConfig":"12"},{"size":1970,"mtime":1611732107407,"results":"19","hashOfConfig":"12"},{"size":2376,"mtime":1611814267246,"results":"20","hashOfConfig":"12"},{"size":1446,"mtime":1611818883901,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"3pszy1",{"filePath":"25","messages":"26","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Vinh\\Desktop\\BrainStationWebDev\\Capstone project\\data-visualization\\client\\src\\index.js",[],["45","46"],"C:\\Users\\Vinh\\Desktop\\BrainStationWebDev\\Capstone project\\data-visualization\\client\\src\\App.js",["47","48","49"],"C:\\Users\\Vinh\\Desktop\\BrainStationWebDev\\Capstone project\\data-visualization\\client\\src\\reportWebVitals.js",[],"C:\\Users\\Vinh\\Desktop\\BrainStationWebDev\\Capstone project\\data-visualization\\client\\src\\Header\\Header.jsx",[],"C:\\Users\\Vinh\\Desktop\\BrainStationWebDev\\Capstone project\\data-visualization\\client\\src\\Dashboard\\Dashboard.jsx",["50","51","52"],"import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport { Link } from 'react-router-dom';\r\nimport Highcharts, { chart } from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\n\r\nimport Header from './../Header/Header';\r\nimport InstantAnswers from './../InstantAnswers/InstantAnswers';\r\nimport WorldCards from '../WorldCards/WorldCards';\r\n\r\nimport './Dashboard.scss';\r\n\r\n\r\n\r\nlet allCountries = 'http://localhost:8080/allcountries';\r\nlet canada = 'http://localhost:8080/canada';\r\nlet duckDuckGo = 'http://localhost:8080/duckduckgo';\r\n\r\nexport default class Dashboard extends Component {\r\n    state = {\r\n        instantAnswers: {},\r\n        countries: {},\r\n        canada: [],\r\n\r\n        //highcharts properties\r\n        pieChartCases: {},\r\n        topNewCaseCountry: {},\r\n        //stacked chart\r\n        top5Countries: {},\r\n        specificCountryChart: {},\r\n\r\n\r\n    }\r\n\r\n    //add comparison calculations to stats to emphasize impacts of COVID\r\n    //add increments or decreasing numbers on dashboard\r\n    //add button enabling dark mode\r\n    //separate stats by components\r\n\r\n\r\n    componentDidMount() {\r\n        axios.get(allCountries).then(item => {\r\n            console.log(item);\r\n\r\n            this.setState({\r\n                countries: item.data,\r\n                pieChartCases: {\r\n                    chart: {\r\n                        type: 'pie'\r\n                    },\r\n                    title: {\r\n                        text: 'Global COVID-19 Cases'\r\n                    },\r\n                    series: [{\r\n                        name: 'cases',\r\n                        colorByPoint: true,\r\n                        data: [\r\n                            {\r\n                                name: 'New Confirmed',\r\n                                y: item.data.Global.NewConfirmed\r\n                            }, {\r\n                                name: 'Total Confirmed',\r\n                                y: item.data.Global.TotalConfirmed\r\n                            },\r\n                            {\r\n                                name: 'New Deaths',\r\n                                y: item.data.Global.NewDeaths\r\n                            },\r\n                            {\r\n                                name: 'Total Deaths',\r\n                                y: item.data.Global.TotalDeaths\r\n                            },\r\n                            {\r\n                                name: 'New Recovered',\r\n                                y: item.data.Global.NewRecovered\r\n                            },\r\n                            {\r\n                                name: 'Total Recovered',\r\n                                y: item.data.Global.TotalRecovered\r\n                            }\r\n                        ]\r\n                    }]\r\n                }\r\n            });\r\n\r\n\r\n        });\r\n\r\n        axios.get(duckDuckGo).then(answer => {\r\n            console.log(answer)\r\n            this.setState({\r\n                instantAnswers: answer.data,\r\n            })\r\n        })\r\n\r\n        this.setState({\r\n            top5Countries: {\r\n                chart: {\r\n                    type: 'column'\r\n                },\r\n                title: {\r\n                    text: 'Top 5 Countries with Most New Cases'\r\n                },\r\n                xAxis: {\r\n                    categories: [\r\n                        1,\r\n                        2,\r\n                        3,\r\n                        4,\r\n                        5\r\n                    ]\r\n                },\r\n                yAxis: {\r\n                    min: 0,\r\n                    title: {\r\n                        text: 'Cases'\r\n                    }\r\n                },\r\n                plotOptions: {\r\n                    column: {\r\n                        stacking: 'normal',\r\n                        dataLabels: {\r\n                            enabled: true\r\n                        }\r\n                    }\r\n                },\r\n                series: [\r\n                    {\r\n                        name: 'confirmed cases',\r\n                        data: [3, 3, 3]\r\n                    },\r\n                    {\r\n                        name: 'recovered cases',\r\n                        data: [3, 5, 1]\r\n                    },\r\n                    {\r\n                        name: 'death cases',\r\n                        data: [9, 5, 1]\r\n                    }\r\n                ]\r\n            },\r\n        })\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    componentDidUpdate() {\r\n\r\n    }\r\n\r\n    setCountry = (e) => {\r\n        axios.get(`http://localhost:8080/country/${e}`).then(item => {\r\n            console.log(item);\r\n            this.setState({\r\n                specificCountryChart: {\r\n                    chart: {\r\n                        type: 'pie'\r\n                    },\r\n                    title: {\r\n                        text: `${item.data.pop().Country} / ${item.data.pop().CountryCode} - ${new Date(item.data.pop().Date).toDateString()}`\r\n                    },\r\n                    series: [{\r\n                        name: 'cases',\r\n                        colorByPoint: true,\r\n                        data: [\r\n                            {\r\n                                name: 'Confirmed',\r\n                                y: item.data.pop().Confirmed\r\n                            },\r\n                            {\r\n                                name: 'Deaths',\r\n                                y: item.data.pop().Deaths\r\n                            },\r\n                            {\r\n                                name: 'Recovered',\r\n                                y: item.data.pop().Recovered\r\n                            }\r\n                        ]\r\n                    }]\r\n                },\r\n            });\r\n        });\r\n    }\r\n\r\n    searchQuery = (e) => {\r\n        e.preventDefault()\r\n        axios.get(`http://localhost:8080/duckduckgo/${e.target.query.value}`).then(res => {\r\n            console.log(res)\r\n            this.setState({\r\n                instantAnswers: res.data,\r\n            })\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        document.title = \"COVID-19 Data Dashboard\"\r\n\r\n        if (this.state.instantAnswers.Infobox) {\r\n            //remove the last nested object for proper mapping JSX\r\n            let popped = this.state.instantAnswers.Infobox.content.pop()\r\n        }\r\n\r\n        let numArr = []\r\n        let biggestCase\r\n        let topNewCaseCountry\r\n        let rankedCases\r\n        let cutRanked\r\n        let top5Countries = []\r\n\r\n\r\n        if (this.state.countries.Countries) {\r\n            // renders an array only with numbers of new cases\r\n            numArr = this.state.countries.Countries.map(num => num.NewConfirmed)\r\n\r\n            // find the largest number\r\n            biggestCase = Math.max(...numArr)\r\n            console.log(biggestCase)\r\n            // find the country with most new cases\r\n            topNewCaseCountry = this.state.countries.Countries.find(num => num.NewConfirmed === biggestCase)\r\n            console.log(topNewCaseCountry)\r\n\r\n            // sort by lowest to highest cases\r\n            rankedCases = numArr.sort((a, b) => a - b)\r\n            console.log(rankedCases)\r\n\r\n            // get the top 5 highest number of cases\r\n            cutRanked = rankedCases.splice(184, 5)\r\n            console.log(cutRanked)\r\n\r\n            // search for top 5 countries with most confirmed cases\r\n\r\n            for (let i = 0; i < cutRanked.length; i++) {\r\n                top5Countries.push(this.state.countries.Countries.find(obj => obj.NewConfirmed === cutRanked[i]))\r\n            }\r\n\r\n            console.log(top5Countries)\r\n        }\r\n\r\n        console.log(topNewCaseCountry)\r\n\r\n        const testChart = {\r\n            chart: {\r\n                type: 'pie'\r\n            },\r\n            title: {\r\n                text: 'U.S COVID-19 Cases'\r\n            },\r\n            series: [{\r\n                name: 'cases',\r\n                colorByPoint: true,\r\n                data: [\r\n                    {\r\n                        name: 'New Confirmed',\r\n                        y: this.state.countries.Countries && topNewCaseCountry.NewConfirmed\r\n                    }, {\r\n                        name: 'Total Confirmed',\r\n                        y: this.state.countries.Countries && topNewCaseCountry.TotalConfirmed\r\n                    },\r\n                    {\r\n                        name: 'New Deaths',\r\n                        y: this.state.countries.Countries && topNewCaseCountry.NewDeaths\r\n                    },\r\n                    {\r\n                        name: 'Total Deaths',\r\n                        y: this.state.countries.Countries && topNewCaseCountry.TotalDeaths\r\n                    },\r\n                    {\r\n                        name: 'New Recovered',\r\n                        y: this.state.countries.Countries && topNewCaseCountry.NewRecovered\r\n                    },\r\n                    {\r\n                        name: 'Total Recovered',\r\n                        y: this.state.countries.Countries && topNewCaseCountry.TotalRecovered\r\n                    }\r\n                ]\r\n            }],\r\n        }\r\n\r\n\r\n        return (\r\n            <section>\r\n                <Header />\r\n                <h2 id=\"dashboard\">Data Dashboard</h2>\r\n\r\n                <form >\r\n                    <label > Select your country to view cases </label>\r\n                    <select\r\n                        name=\"countries\"\r\n                        \r\n                        onChange={e => this.setCountry(e.target.value)}>\r\n\r\n                        {this.state.countries.Countries && this.state.countries.Countries.map(country => {\r\n                            return <option\r\n                                key={country.ID}\r\n                                value={country.Country}>\r\n                                {country.Country}\r\n                            </option>\r\n                        })}\r\n\r\n                    </select>\r\n                </form>\r\n\r\n                {this.state.specificCountryChart.series !== undefined ? <HighchartsReact\r\n                    highcharts={Highcharts}\r\n                    options={this.state.specificCountryChart} /> : <h3>Select another country to begin</h3>}\r\n\r\n                <div className=\"test\">\r\n                    <HighchartsReact\r\n                        highcharts={Highcharts}\r\n                        options={this.state.pieChartCases} />\r\n                    <p>data updated as of {new Date(this.state.countries.Date).toDateString()}</p>\r\n                </div>\r\n\r\n                <WorldCards\r\n                    Global={this.state.countries.Global} />\r\n\r\n                <div>\r\n                    <h2>{this.state.countries.Countries && topNewCaseCountry.Country} is the country with most newly confirmed cases</h2>\r\n\r\n                    <HighchartsReact\r\n                        highcharts={Highcharts}\r\n                        options={testChart}\r\n                    />\r\n\r\n\r\n                </div>\r\n\r\n                <div>\r\n                    <h2>Top 5 countries with most newly confirmed cases</h2>\r\n\r\n                    {/* need to pass the processed variable */}\r\n                    <HighchartsReact\r\n                        highcharts={Highcharts}\r\n                        options={this.state.top5Countries} />\r\n                </div>\r\n\r\n\r\n                <div>\r\n                    <h2>your country here</h2>\r\n                    <h2>Infection rate {null}</h2>\r\n                    <h2>Recovered</h2>\r\n                </div>\r\n\r\n\r\n\r\n                <div>\r\n                    <h2>Province details</h2>\r\n                    <p>province 1</p>\r\n                    <p>confirmed cases, recovered, deaths</p>\r\n                    <p>province 2 etc.</p>\r\n                </div>\r\n\r\n                <InstantAnswers\r\n                    Heading={this.state.instantAnswers.Heading}\r\n\r\n                    Image={this.state.instantAnswers.Image}\r\n\r\n                    Abstract={this.state.instantAnswers.Abstract}\r\n\r\n                    AbstractURL={this.state.instantAnswers.AbstractURL}\r\n\r\n                    Infobox={this.state.instantAnswers.Infobox}\r\n\r\n                    searchQuery={this.searchQuery}\r\n                />\r\n\r\n\r\n\r\n                <div>\r\n                    <h2>And More Data Awaits After Signing Up (Location-based data, export as PDF, CSV and social media sharing)</h2>\r\n                    <Link to='/signin'>\r\n                        <button>Sign In</button>\r\n                    </Link>\r\n                </div>\r\n\r\n            </section>\r\n        )\r\n    }\r\n}\r\n","C:\\Users\\Vinh\\Desktop\\BrainStationWebDev\\Capstone project\\data-visualization\\client\\src\\SignIn\\SignIn.jsx",["53","54","55"],"C:\\Users\\Vinh\\Desktop\\BrainStationWebDev\\Capstone project\\data-visualization\\client\\src\\UserHomePage\\UserHomePage.jsx",["56","57"],"import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport Highcharts, { chart } from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport Header from './../Header/Header';\r\n\r\nimport './UserHomePage.scss';\r\n\r\n\r\nlet allCountries = 'https://api.covid19api.com/summary';\r\nlet canada = 'https://api.covid19api.com/live/country/canada';\r\n\r\n\r\n\r\nexport default class Dashboard extends Component {\r\n    state = {\r\n        countries: {},\r\n        canada: [],\r\n        chartOptions: {\r\n            chart: {\r\n                type: 'pie'\r\n            },\r\n            title: {\r\n                text: 'Global COVID-19 Cases'\r\n            },\r\n            series: [{\r\n                name: 'cases',\r\n                colorByPoint: true,\r\n                data: [{\r\n                    name: 'Jane',\r\n                    y: 31\r\n                }, {\r\n                    name: 'John',\r\n                    y: 69\r\n                }]\r\n            }]\r\n        }\r\n    }\r\n\r\n    //add comparison calculations to stats to emphasize impacts of COVID\r\n    //add increments or decreasing numbers on dashboard\r\n    //add button enabling dark mode\r\n    //separate stats by components\r\n\r\n\r\n    componentDidMount() {\r\n        axios.get(allCountries).then(item => {\r\n            console.log(item);\r\n\r\n            this.setState({\r\n                countries: item.data,\r\n                chartOptions: {\r\n                    series: [{\r\n                        // name: item.data.Countries[0].TotalConfirmed,\r\n                        name: 'cases',\r\n                        data: [\r\n                            {\r\n                            name: 'New Confirmed',\r\n                            y: item.data.Global.NewConfirmed\r\n                        }, {\r\n                            name: 'Total Confirmed',\r\n                            y: item.data.Global.TotalConfirmed\r\n                        },\r\n                        {\r\n                            name: 'New Deaths',\r\n                            y: item.data.Global.NewDeaths\r\n                        },\r\n                        {\r\n                            name: 'Total Deaths',\r\n                            y: item.data.Global.TotalDeaths\r\n                        },\r\n                        {\r\n                            name: 'New Recovered',\r\n                            y: item.data.Global.NewRecovered\r\n                        },\r\n                        {\r\n                            name: 'Total Recovered',\r\n                            y: item.data.Global.TotalRecovered\r\n                        }\r\n                    ]\r\n                    }]\r\n                }\r\n            });\r\n        });\r\n\r\n\r\n      \r\n\r\n\r\n    }\r\n\r\n\r\n    componentDidUpdate() {\r\n\r\n\r\n    }\r\n\r\n    setCountry = (event) => {\r\n        console.log(event.target.country.value)\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        document.title = \"User Data Dashboard\"\r\n        return (\r\n            <section>\r\n                <Header username='jason'/>\r\n\r\n                <h2>data dashboard</h2>\r\n\r\n                <form action=\"\">\r\n                    <label htmlFor=\"\"> Select your country to view cases </label>\r\n                    <select name=\"countries\" id=\"countries\">\r\n\r\n                        {this.state.countries.Countries && this.state.countries.Countries.map(country => {\r\n                            return <option\r\n                                key={country.ID}\r\n                                name='country'\r\n                                value={country.Country}\r\n                                onChange={this.setCountry}>\r\n                                {country.Country}\r\n                            </option>\r\n                        })}\r\n\r\n                    </select>\r\n                </form>\r\n\r\n                <div className=\"test\">\r\n                    <HighchartsReact\r\n                        highcharts={Highcharts}\r\n                        options={this.state.chartOptions} />\r\n                </div>\r\n\r\n\r\n                <p>data updated as of {new Date(this.state.countries.Date).toDateString()}</p>\r\n\r\n                <div>\r\n                    <h2>your country here</h2>\r\n                    <h2>Infection rate {null}</h2>\r\n                    <h2>Recovered</h2>\r\n\r\n                </div>\r\n\r\n                <div>\r\n                    <h2>World Total Cases</h2>\r\n                    {/* <p>{(JSON.stringify(this.state.countries.Global.TotalConfirmed)/7,800,000,000)*100}</p> */}\r\n                    <p>{(780 / 7800) * 100}</p>\r\n                    <p>confirmed cases</p>\r\n                    <p>source: <a href=\"https://yaleglobal.yale.edu/content/world-population-2020-overview\">Yale University</a>\r\n                    </p>\r\n                </div>\r\n\r\n                <div>\r\n                    {/* sort method in array? style with most red, then decrease redness by 10% */}\r\n                    <h2>Top #1 country with most confirmed cases</h2>\r\n                    <h2>Top #2...</h2>\r\n                </div>\r\n\r\n                <div>\r\n                    <h2>Province details</h2>\r\n                    <p>province 1</p>\r\n                    <p>confirmed cases, recovered, deaths</p>\r\n                    <p>province 2 etc.</p>\r\n                </div>\r\n\r\n\r\n\r\n\r\n\r\n            </section>\r\n        )\r\n    }\r\n}\r\n","C:\\Users\\Vinh\\Desktop\\BrainStationWebDev\\Capstone project\\data-visualization\\client\\src\\InstantAnswers\\InstantAnswers.jsx",[],"C:\\Users\\Vinh\\Desktop\\BrainStationWebDev\\Capstone project\\data-visualization\\client\\src\\WorldCards\\WorldCards.jsx",[],"C:\\Users\\Vinh\\Desktop\\BrainStationWebDev\\Capstone project\\data-visualization\\client\\src\\SignIn\\TestSignIn.jsx",["58","59","60"],{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","severity":1,"message":"66","line":3,"column":8,"nodeType":"67","messageId":"68","endLine":3,"endColumn":14},{"ruleId":"65","severity":1,"message":"69","line":5,"column":8,"nodeType":"67","messageId":"68","endLine":5,"endColumn":14},{"ruleId":"65","severity":1,"message":"70","line":8,"column":35,"nodeType":"67","messageId":"68","endLine":8,"endColumn":39},{"ruleId":"65","severity":1,"message":"71","line":4,"column":22,"nodeType":"67","messageId":"68","endLine":4,"endColumn":27},{"ruleId":"65","severity":1,"message":"72","line":16,"column":5,"nodeType":"67","messageId":"68","endLine":16,"endColumn":11},{"ruleId":"65","severity":1,"message":"73","line":204,"column":17,"nodeType":"67","messageId":"68","endLine":204,"endColumn":23},{"ruleId":"65","severity":1,"message":"74","line":1,"column":17,"nodeType":"67","messageId":"68","endLine":1,"endColumn":26},{"ruleId":"65","severity":1,"message":"75","line":1,"column":28,"nodeType":"67","messageId":"68","endLine":1,"endColumn":36},{"ruleId":"65","severity":1,"message":"70","line":2,"column":10,"nodeType":"67","messageId":"68","endLine":2,"endColumn":14},{"ruleId":"65","severity":1,"message":"71","line":3,"column":22,"nodeType":"67","messageId":"68","endLine":3,"endColumn":27},{"ruleId":"65","severity":1,"message":"72","line":11,"column":5,"nodeType":"67","messageId":"68","endLine":11,"endColumn":11},{"ruleId":"65","severity":1,"message":"75","line":1,"column":28,"nodeType":"67","messageId":"68","endLine":1,"endColumn":36},{"ruleId":"65","severity":1,"message":"76","line":1,"column":38,"nodeType":"67","messageId":"68","endLine":1,"endColumn":47},{"ruleId":"65","severity":1,"message":"70","line":2,"column":10,"nodeType":"67","messageId":"68","endLine":2,"endColumn":14},"no-native-reassign",["77"],"no-negated-in-lhs",["78"],"no-unused-vars","'Header' is defined but never used.","Identifier","unusedVar","'SignIn' is defined but never used.","'Link' is defined but never used.","'chart' is defined but never used.","'canada' is assigned a value but never used.","'popped' is assigned a value but never used.","'Component' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation"]